# # -*- coding: utf-8 -*-
import os
import datetime
import requests
import telebot
import django
import sys
import logging

if __name__ == '__main__':
    URL_BITRIX = ''
    project_path = os.path.dirname(os.path.abspath('../../main.py'))
    sys.path.append(project_path)
    os.environ["DJANGO_SETTINGS_MODULE"] = "tune.settings"
    django.setup()
    TOKEN = '5376806714:AAELQVr7_Xe648jHUnI6ZmVa32VPqikNz8Q'
    client = telebot.TeleBot(TOKEN, threaded=False)
    # path_to_media = 'C:\\Users\\lindel\\Py_Projects\\newTune\\media\\'
    path_to_media = ''
    admin_chat_id = [572982939]
    Log_Format = "%(levelname)s %(asctime)s - %(message)s"
    logging.basicConfig(filename="C:\\Users\\lindel\\Py_Projects\\newTune\cost_models\\logfile.log",
                        filemode="a",
                        format=Log_Format,
                        level=logging.ERROR)

if __name__ != '__main__':
    URL_BITRIX = 'https://im.bitrix.info/imwebhook/eh/e5750b73ce4b6f9cbedb96d9d7faf0881653435781/'
    TOKEN = '5239855839:AAFeQBXF4EmVJK7DDy6RN9rPeIIgskPWLig'
    client = telebot.TeleBot(TOKEN, threaded=False)
    path_to_media = '/home/apple/code/project1/tune/media/'
    admin_chat_id = [572982939]

    Log_Format = "%(levelname)s %(asctime)s - %(message)s"
    logging.basicConfig(filename="/home/apple/code/project1/tune/logfile.log",
                        filemode="a",
                        format=Log_Format,
                        level=logging.ERROR)

logger = logging.getLogger()

from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from trade_in.models import (TelegramUserModel, UserStepModel,
                             TradeInDevicesModel, TradeInSeriesModel,
                             VariableFoeStepModel, TradeInStepModel)
from trade_id.models import (ButtonModel, ServiceModels,
                             UserChoiceModel, UseService)
from tune_admin.models import (Product, SeriesCategory,
                               StaticUserHourModel, UserModel,
                               RegionUserModel, )
from trade_trade.models import Trade

menu_support = ['üì± iPhone', 'üì≤ iPad', 'üíª MacBook',
                'üéß AirPods', '‚åö Watch',
                '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']

sup_callback = ['–ù–∞–∑–∞–¥ –∫ –ë/–£ iPhone', '–ù–∞–∑–∞–¥ –∫ –ë/–£ iPad',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ MacBook', '–ù–∞–∑–∞–¥ –∫ –ë/–£ AirPods',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ Watch', '–ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']


def get_category():
    result = ['üì± iPhone', 'üì≤ iPad', 'üíª MacBook', 'üéß AirPods', '‚åö Watch', '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']
    return result


def get_series(name_series):
    result = SeriesCategory.objects.filter(category__icontains=f'{name_series}')
    list_1 = []
    for i in result:
        list_1.append(i.category)
    return list_1


def get_detail_product(name_product):
    result = Product.objects.filter(name=f'{name_product}')
    return result


def get_trade_state(name_to_search):
    result = Trade.objects.filter(name_button=f'{name_to_search}')
    return result


def get_not_category(message):
    result = Product.objects.select_related().filter(category_id=6, sell=False,
                                                     booking=False,
                                                     moderation=True,
                                                     regin=UserModel.objects.get(
                                                         user_id=message.chat.id
                                                     ).region_user
                                                     )
    list_device = []
    for r in result:
        list_device.append(r.name)

    return list_device


def get_all_products():
    result = Product.objects.values('name').filter(sell=False,
                                                   booking=False,
                                                   moderation=True,
                                                   )
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


def max_all_products():
    result = Product.objects.values('name')
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


def get_current_product(message):
    result = Product.objects.values('series_id').filter(sell=False,
                                                        booking=False,
                                                        moderation=True,
                                                        regin=UserModel.objects.get(
                                                            user_id=message.chat.id
                                                        ).region_user
                                                        )
    list_id = []
    exit = []
    for i in result:
        list_id.append(i['series_id'])
    for i in list_id:
        result = SeriesCategory.objects.values('category').filter(id=i)
        exit.append(result[0]['category'])
    return list(set(exit))


def get_products(category_name, message):
    id_category = SeriesCategory.objects.values('id').filter(category__icontains=f'{category_name}')
    result = Product.objects.values('name').filter(series_id=id_category[0]['id'],
                                                   moderation=True,
                                                   booking=False,
                                                   sell=False,
                                                   regin=UserModel.objects.get(
                                                       user_id=message.chat.id
                                                   ).region_user
                                                   )
    list_product = []
    for i in result:
        list_product.append(i['name'])
    return list_product


def get_price(price_min, price_max, message):
    result = Product.objects.values('name').filter(
        price__gte=price_min,
        price__lte=price_max,
        name__icontains=f'{"iPhone"}',
        booking=False,
        sell=False,
        moderation=True,
        regin=UserModel.objects.get(
            user_id=message.chat.id
        ).region_user
    )
    result = [['‚ãÖ ' + str(x['name'])] for x in result]
    return result


def get_max_min_price(cost):
    dia = [[1000, 15000],
           [15000, 25000],
           [25000, 35000],
           [35000, 45000],
           [45000, 55000],
           [55000, 70000],
           [70000, 100000],
           [100000, 130000],
           [130000, 200000], ]
    for i in dia:
        if i[0] <= cost <= i[1]:
            return [i[0], i[1]]


def get_sale(message):
    result = Product.objects.values('name').filter(sell=False,
                                                   booking=False,
                                                   sale=True,
                                                   regin=UserModel.objects.get(
                                                       user_id=message.chat.id
                                                   ).region_user
                                                   )
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


global_reg = RegionUserModel.objects.all()
regions_search = ['‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: ' + i.name for i in global_reg]


@client.message_handler(func=lambda message: message.text in [
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞',
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    '‚öôÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    '‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',

] + regions_search)
def switch_region(message):
    global regions_search

    if message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞':
        global_regions = RegionUserModel.objects.all()
        regions_search = ['‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: ' + i.name for i in global_regions]
        global_regions = [['‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: ' + i.name] for i in global_regions]
        global_regions.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = global_regions
        client.send_message(chat_id=message.chat.id,
                            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω',
                            reply_markup=keyboard)

    if message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        markup_notif = [
            ['‚öôÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = markup_notif
        client.send_message(chat_id=message.chat.id,
                            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω',
                            reply_markup=keyboard)

    if message.text in ['‚öôÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']:
        if message.text == '‚öôÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            UserModel.objects.filter(
                user_id=str(message.chat.id),
            ).update(notifications=True)
            start_message(message,
                          text=f'–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ',
                          )
        if message.text == '‚öôÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            UserModel.objects.filter(
                user_id=str(message.chat.id),
            ).update(notifications=False)
            start_message(message,
                          text=f'–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ',
                          )

    if message.text in regions_search:
        UserModel.objects.filter(
            user_id=str(message.chat.id),
        ).update(region_user=RegionUserModel.objects.get(name=message.text.replace('‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: ', '')))
        start_message(message,
                      text=f"–í–∞—à —Ä–µ–≥–∏–æ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text.replace('‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: ', '')}",
                      )


@client.message_handler(commands=['set'])
def menu_settings(message):
    user_info = UserModel.objects.get(
        user_id=str(message.chat.id),
    )
    user_notifications = user_info.notifications
    if user_notifications:
        user_notifications = '–í–∫–ª—é—á–µ–Ω—ã'
    else:
        user_notifications = '–û—Ç–∫–ª—é—á–µ–Ω—ã'
    user_region = user_info.region_user
    text = f'–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' \
           f'–†–µ–≥–∏–æ–Ω: {user_region}\n' \
           f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {user_notifications}'
    markup_settings = [
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞'],
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'],
        ['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
    ]
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = markup_settings
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard)


@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å–∫')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞–ª–æ')
@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å')
@client.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@client.message_handler(commands=['start'])
def start_message(message, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?'):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('üí•–°–∫–∏–¥–∫–∏üí•')
        btn2 = telebot.types.KeyboardButton('–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        btn3 = telebot.types.KeyboardButton('–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        btn4 = telebot.types.KeyboardButton('Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
        btn5 = telebot.types.KeyboardButton('–ú–æ–π –±—é–¥–∂–µ—Ç')
        # btn6 = telebot.types.KeyboardButton('–û–±–º–µ–Ω–∫–∞')
        # btn7 = telebot.types.KeyboardButton('FAQ')
        btn8 = telebot.types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
        markup.add(btn1)
        markup.add(btn2, btn3)
        markup.add(btn4, btn5)
        # markup.add(btn6, btn7)
        markup.add(btn8)
        client.send_message(message.chat.id, text=text, reply_markup=markup)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ start_message ")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ start_message'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(commands=['sm'])
@client.message_handler(func=lambda message: message.text == '–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£')
def support_menu(message, text='–í–æ—Ç –≤—Å–µ –ë\–£'):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('üì± iPhone')
        btn2 = telebot.types.KeyboardButton('üì≤ iPad')
        btn3 = telebot.types.KeyboardButton('üíª MacBook')
        btn4 = telebot.types.KeyboardButton('‚åö Watch')
        btn5 = telebot.types.KeyboardButton('üéß AirPods')
        btn8 = telebot.types.KeyboardButton('‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        btn9 = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1)
        markup.add(btn4, btn5)
        markup.add(btn2, btn3)
        markup.add(btn8)
        markup.add(btn9)
        client.send_message(message.chat.id, text=text, reply_markup=markup)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ support_menu")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ support_menu'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text == '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def supp_product(message):
    try:
        """
        –û–±—Ä–∞—Ç–æ–∫–∞ –¥–ª—è –ë\–£
        """
        products = [[x] for x in get_products(message.text.split()[1],
                                              message=message)]
        if not products:
            support_menu(message, text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æüòî\n'
                                       '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ\n'
                                       'https://t.me/tuneapple üëà')
            return 0
        products.sort()
        if message.text in get_not_category(message=message):
            products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
        else:
            products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])

        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = products
        client.send_message(chat_id=message.chat.id,
                            text='–ò—â—É: ' + message.text,
                            reply_markup=keyboard_products)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ supp_product")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ supp_product'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text in menu_support)
@client.message_handler(func=lambda message: " ".join(message.text.split()[1:5]) in sup_callback)
def support_models(message):
    try:
        """
        –ü–æ–∫–∞–∂–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
        :param message:
        :return:
        """

        if len(message.text.split()) <= 2:
            model = message.text.split()[1]
        else:
            xxx = message.text.split()
            model = xxx[4]

        models = [x for x in get_series(model) if x in get_current_product(message)]
        if models == 'iPhone':
            bce = ['iPhone 5', 'iPhone 6 / 6+ / 6s / 6s+',
                   'iPhone 7 / 7+', 'iPhone 8 / 8+',
                   'iPhone X / XS / XS Max', 'iPhone 11 / Pro / Max',
                   'iPhone 12 / Pro / Max / Mini', 'iPhone 13 / Pro / Max / Mini',
                   'iPhone SE / XR']

            ect = models.copy()

            models = bce
            x = bce.copy()
            for b in ect:
                if b in x:
                    x.remove(b)
            for i in x:
                models.remove(i)

        if not models:
            support_menu(message, text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æüòî\n'
                                       '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ\n'
                                       'https://t.me/tuneapple üëà')

            return 0

        models = [[x] for x in models]

        models.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])
        keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_category.keyboard = models
        client.send_message(chat_id=message.chat.id,
                            text=f'–í–æ—Ç —á—Ç–æ –µ—Å—Ç—å –∏–∑ {model}',
                            reply_markup=keyboard_category)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ support_models")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ support_models'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text in get_current_product(message))
def support_products(message):
    try:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏/ —Å–µ—Ä–∏–∏
        :param message:
        :return:
        """
        products = [x for x in get_products(message.text,
                                            message=message)]

        products.sort()
        products = [[x] for x in products]

        if message.text in get_not_category(message=message):
            products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
        else:
            products.append([f'‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ {message.text.split()[0]}'])

        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = products
        client.send_message(chat_id=message.chat.id,
                            text='–ò—â—É: ' + message.text,
                            reply_markup=keyboard_products)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ support_products")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ support_products'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text in [x for x in get_all_products()])
@client.message_handler(func=lambda message: '‚ãÖ' in message.text)
@client.message_handler(func=lambda message: message.text.split()[0] == 'üîª')
def show_model(message):
    try:
        dig = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ]
        tmp = message.text
        name_to_search = message.text
        name = message.text.split()
        if name[0] == '‚ãÖ':
            name.remove('‚ãÖ')
        if '‚ãÖ' in message.text:
            name_to_search = message.text.replace('‚ãÖ ', '')

        if name[0] == 'üîª':
            name.remove('üîª')
        if 'üîª' in message.text:
            name_to_search = message.text.replace('üîª ', '')

        if name[0] == 'üîÅ':
            name.remove('üîÅ')
        if 'üîÅ' in message.text:
            name_to_search = message.text.replace('üîÅ ', '')
        name1 = name[0] + ' ' + name[1][0]
        products = []

        if 'üîÅ' not in message.text and \
                len(name[1]) > 1 or message.text in get_not_category(message=message):

            if message.text in get_not_category(message=message):

                products = get_not_category(message=message)
            elif (name[1][0] + name[1][1] == 'XR' or name[1][0] +
                  name[1][1] == 'SE') and 'watch' not in message.text.lower():

                xr = name[1][0] + name[1][1]
                products = get_products(xr,
                                        message=message)
            elif name[1][0] in dig and name[1][1] in dig:

                name_11 = name[0] + ' ' + name[1]
                products = get_products(name_11,
                                        message=message)
            else:
                products = get_products(name1,
                                        message=message)

        if len(name[1]) == 1 and message.text not in get_not_category(message=message):
            products = get_products(name1,
                                    message=message)

        if message.text in products:
            products.remove(message.text)

        detail_product = get_detail_product(name_to_search)
        if '‚ãÖ' in tmp:
            current_price = get_max_min_price(detail_product[0].price)
            products = get_price(current_price[0], current_price[1], message)
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. ' + detail_product[
                                    0].article])
            products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])

        elif 'üîª' in tmp:
            products = [['üîª ' + x] for x in get_sale(message)]
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + tmp + ' –ê—Ä—Ç. ' + detail_product[0].article])
            products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

        elif 'üîÅ' in tmp:
            detail_product = get_trade_state(name_to_search)
            products = [['üîÅ ' + x.name_button] for x in Trade.objects.all()]
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + tmp])
            products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

        else:
            products = [[x] for x in products]
            products.insert(0,
                            ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. ' + detail_product[
                                0].article])
            if message.text in get_not_category(message=message):
                products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£ ' + ''])
            else:
                products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ ' + message.text.split()[0]])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = products
        if 'üîÅ' not in tmp:
            if detail_product[0].image_3:
                f1, f2, f3 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                             open(path_to_media + str(detail_product[0].image_2), 'rb'), \
                             open(path_to_media + str(detail_product[0].image_3), 'rb')
                f1, f2, f3 = f1.read(), f2.read(), f3.read()
                client.send_media_group(chat_id=message.chat.id, media=[
                    telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text, parse_mode='HTML'),
                    telebot.types.InputMediaPhoto(f2),
                    telebot.types.InputMediaPhoto(f3), ])
                client.send_message(chat_id=message.chat.id,
                                    text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                    reply_markup=keyboard,
                                    parse_mode='HTML')
                return 0
            else:
                f1, f2 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                         open(path_to_media + str(detail_product[0].image_2), 'rb')

                f1, f2 = f1.read(), f2.read()
                client.send_media_group(chat_id=message.chat.id, media=[
                    telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text, parse_mode='HTML'),
                    telebot.types.InputMediaPhoto(f2)])
                client.send_message(chat_id=message.chat.id,
                                    text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                    reply_markup=keyboard,
                                    parse_mode='HTML')
                return 0
        else:
            f1 = open(path_to_media + str(detail_product[0].image_1), 'rb')
            f2 = open(path_to_media + str(detail_product[0].image_2), 'rb')

            f1, f2 = f1.read(), f2.read()
            client.send_media_group(chat_id=message.chat.id, media=[
                telebot.types.InputMediaPhoto(f1, caption=detail_product[0].text, parse_mode='HTML'),
                telebot.types.InputMediaPhoto(f2)])
            client.send_message(chat_id=message.chat.id,
                                text='–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
                                reply_markup=keyboard,
                                parse_mode='HTML')
            return 0
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ show_model")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ show_model'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(commands=['new'])
@client.message_handler(func=lambda message: message.text == '–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def new_model(message):
    start_message(message,
                  text='–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.\n'
                       '–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '
                       '¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª '
                       '–∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n'
                       '+7 (932) 222-54-45')


@client.message_handler(commands=['qwe123'])
@client.message_handler(func=lambda message: '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º' in message.text)
def new_model(message):
    new_mod = [
        ['üÜï iPhone'],
        # ['üÜï iPad'],
        ['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
    ]
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = new_mod
    client.send_message(chat_id=message.chat.id,
                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                        reply_markup=keyboard_category)


from cost_models.base_price import TopicalCost

topical = TopicalCost()
topical.get_clear()


@client.message_handler(func=lambda message: message.text.split()[0] == 'üÜï')
@client.message_handler(func=lambda message: '‚¨ÖÔ∏è–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π ' in message.text)
def new_model_step_1(message):
    if '‚¨ÖÔ∏è–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π ' in message.text:
        device = message.text.replace('‚¨ÖÔ∏è–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π ', '')
    else:
        device = message.text.replace('üÜï ', '').replace(' ', '')

    products = topical.iphone
    series = set([device + ' ' + i['series'] for i in products
                  if device == i['device']
                  and len(i['series'].split()) == 1])
    z = sorted([['‚ñ™Ô∏è ' + i] for i in series])
    z = z[::-1]
    out = []

    while z:
        if len(z) == 1:
            out.append(z[0])
            break
        tmp = z[:2]
        z.remove(tmp[0])
        z.remove(tmp[1])
        out.append([tmp[0][0], tmp[1][0]])
    out.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = out
    client.send_message(chat_id=message.chat.id,
                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é',
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text.split()[0] == '‚ñ™Ô∏è')
def new_model_step_1_2(message):
    device = message.text.replace('‚ñ™Ô∏è ', '').split()[0]
    seria = message.text.replace('‚ñ™Ô∏è ', '')
    products = topical.iphone
    series = set((i['device'] + ' ' + i['series']).replace('\n', '') for i in products
                 if seria.replace(device + ' ', '') in i['series'])
    z = sorted([['üî∏ ' + i] for i in series])
    z = z[::-1]
    out = []

    while z:
        if len(z) == 1:
            out.append(z[0])
            break
        tmp = z[:2]
        z.remove(tmp[0])
        z.remove(tmp[1])
        out.append([tmp[0][0], tmp[1][0]])
    out.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = out
    client.send_message(chat_id=message.chat.id,
                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é',
                        reply_markup=keyboard_category)


def get_memory(memory):
    if memory == 1:
        return '1 –¢–ë'
    return memory


@client.message_handler(func=lambda message: message.text.split()[0] == 'üî∏')
def new_model_step_2(message):
    device = message.text.split()[1]
    if 'üî∏' in message.text:
        seria = message.text.replace('üî∏ ', '')
    elif 'üî∏' not in message.text:
        seria = message.text.split()[-1]
    elif '‚¨ÖÔ∏è' in message.text:
        seria = message.text.replace('‚¨ÖÔ∏è', '')
        seria = seria.replace('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ä–∏—é', '')
    products = topical.iphone
    seria = list(set('üîπ ' + get_clear_name(seria) + ' ' + get_memory(i['memory'])
                     for i in products
                     if i['series'] in seria))
    z = sorted(list([i] for i in seria))
    z = z[::-1]
    z.append([f'‚¨ÖÔ∏è–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π {device}'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = z
    client.send_message(chat_id=message.chat.id,
                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é',
                        reply_markup=keyboard_category)


def get_cost(l):
    cost = [i for i in l]
    last_1 = cost.pop(-1)
    last_2 = cost.pop(-1)
    last_3 = cost.pop(-1)
    res_price = "".join(cost) + '.' + last_3 + last_2 + last_1
    return res_price


def get_color(color):
    color = color.capitalize()
    return color


def get_clear_name(name):
    import re
    memory = ' 64| 128| 256| 512| 1 –¢–ë'
    name = re.sub(memory, '', name)
    return name


@client.message_handler(func=lambda message: message.text.split()[0] == 'üîπ')
def new_model_step_3(message):
    help_text = '–†–æ—Å—Ç–µ—Å—Ç üá∑üá∫ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple 2 –≥–æ–¥–∞.' \
                '\n\n–ê–º–µ—Ä–∏–∫–∞ üá∫üá∏ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple 1 –≥–æ–¥.'
    seria = message.text.replace('üîπ ', '')
    device = seria.split()[0]
    products = topical.iphone
    sss = []

    from itertools import groupby

    def grouper(item):
        """–ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        return item['color']

    data = topical.iphone
    data = sorted(data, key=grouper)
    kk = ''
    for key, group_items in groupby(data, key=grouper):
        kk_new = key
        for item in group_items:
            if device + ' ' + item['series'] + ' ' + get_memory(item['memory']) \
                    == seria and item['memory'] in seria:
                if kk_new == kk:
                    sss.append(item)
                else:
                    kk = kk_new
                    item['device'] = '\n' + item['device']
                    sss.append(item)

    series = [
        i['device'] + ' ' +
        i['series'] + ' ' +
        get_memory(i['memory']) + ' ' +
        get_color(i['color']) + ' ' +
        get_cost(str(int(float(i['cost'])))) + ' ' + i['region']
        for i in sss]

    seria = list(set('üîπ ' + get_clear_name(seria) + ' ' + get_memory(i['memory'])
                     for i in products
                     if i['series'] in seria))

    z = sorted(list([i] for i in seria))
    z = z[::-1]
    z.append([f'‚¨ÖÔ∏è–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π {device}'])
    text = "\n".join(series).replace('–∞–º–µ—Ä–∏–∫–∞', 'üá∫üá∏').replace('—Ä–æ—Å—Ç–µ—Å—Ç', 'üá∑üá∫') + '\n\n' + help_text
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = z
    from tune_admin.get_photo import get_photo
    get_photo(message.text.replace('üîπ ', ''))

    f1 = open(get_photo(message.text.replace('üîπ ', '')), 'rb')

    f1 = f1.read()
    client.send_photo(chat_id=message.chat.id,
                      photo=f1,
                      caption=text,
                      reply_markup=keyboard_category)


@client.message_handler(commands=['mb'])
@client.message_handler(func=lambda message: message.text == '–ú–æ–π –±—é–¥–∂–µ—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç')
def my_budget(message, text='–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç'):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('–æ—Ç 1000 –¥–æ 15000')
        btn2 = telebot.types.KeyboardButton('–æ—Ç 15000 –¥–æ 25000')
        btn3 = telebot.types.KeyboardButton('–æ—Ç 25000 –¥–æ 35000')
        btn4 = telebot.types.KeyboardButton('–æ—Ç 45000 –¥–æ 55000')
        btn5 = telebot.types.KeyboardButton('–æ—Ç 55000 –¥–æ 70000')
        btn6 = telebot.types.KeyboardButton('–æ—Ç 70000 –¥–æ 100000')
        btn7 = telebot.types.KeyboardButton('–æ—Ç 100000 –¥–æ 130000')
        btn8 = telebot.types.KeyboardButton('–æ—Ç 130000 –¥–æ 200000')
        btn9 = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn2)
        markup.add(btn3, btn4)
        markup.add(btn5, btn6)
        markup.add(btn7, btn8)
        markup.add(btn9)
        client.send_message(message.chat.id, text=text, reply_markup=markup)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ my_budget")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ my_budget'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == '–æ—Ç')
def my_budget_show(message):
    try:
        if len(message.text.split()) >= 4:
            try:
                price_min = message.text.split()[1]
                price_max = message.text.split()[3]
                keyboard_products = get_price(price_min, price_max, message)

                if not keyboard_products:
                    my_budget(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                    return 0
                keyboard_products.sort()
                keyboard_products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])

                keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
                keyboard_category.keyboard = keyboard_products
                client.send_message(chat_id=message.chat.id,
                                    text='–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ –í–∞—à–µ–º—É –±—é–¥–∂–µ—Ç—É',
                                    reply_markup=keyboard_category,
                                    parse_mode='MarkdownV2')
            except EnvironmentError as _:
                pass
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ my_budget_show")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ my_budget_show'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


from faq.models import FAQModel

faq_info = FAQModel.objects.all()
buttons_info = [['üí° ' + i.name] for i in faq_info]
buttons_info.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])


@client.message_handler(func=lambda message: message.text == 'FAQ')
def main_menu_faq(message, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ'):
    try:
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = buttons_info
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            reply_markup=keyboard)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ main_menu_faq")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ main_menu_faq'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üí°')
def main_menu_faq(message):
    try:
        text_message = message.text.replace('üí° ', '')
        info = None
        for i in faq_info:
            if i.name == text_message:
                info = i
                break

        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = buttons_info
        if info.image:
            photos = open(path_to_media + str(info.image), 'rb')
            photos = photos.read()
            client.send_photo(
                chat_id=message.chat.id,
                caption=info.text,
                photo=photos,
                reply_markup=keyboard,
            )
        if not info.image:
            client.send_message(chat_id=message.chat.id,
                                text=info.text,
                                reply_markup=keyboard)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ main_menu_faq")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ main_menu_faq'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


main_menu = TradeInDevicesModel.objects.all()
main_menu = [[buttons.name] for buttons in main_menu]
main_menu.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])


@client.message_handler(commands=['ti'])
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ Trade-in')
@client.message_handler(func=lambda message: message.text == 'Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
def trade_main(message, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    start_message(message,
                  text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ trade-in –¥–æ—Å—Ç—É–ø–Ω–∞!\n'
                       '–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–≤–æ–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
                       ' Apple –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É'
                       ' (—Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ trade-in).\n'
                       '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '
                       '¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n'
                       '–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n'
                       '+7 (932) 222-54-45')
    
    
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ Trade-in')
def trade_main(message, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    try:
        start_message(message,
                      text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ trade-in –¥–æ—Å—Ç—É–ø–Ω–∞!\n'
                           '–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–≤–æ–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
                           ' Apple –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É'
                           ' (—Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ trade-in).\n'
                           '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç '
                           '¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n'
                           '–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n'
                           '+7 (932) 222-54-45')

        list_user = UserModel.objects.all()
        list_user_id = [str(user_id.user_id) for user_id in list_user]

        id_user = message.chat.id
        if id_user not in list_user_id:
            list_user_id.append(id_user)
            TelegramUserModel.objects.create(
                user_id=id_user,
                username=message.chat.username,
                first_name=message.chat.first_name,
            )

        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = main_menu
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            reply_markup=keyboard)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ trade_main")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ trade_main'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == '‚ôªÔ∏è')
def trade_series(message):
    try:
        device = message.text.split()[1]
        main_menu_series = TradeInSeriesModel.objects.filter(name__icontains=device)
        main_menu_series = [['üìç ' + buttons.name] for buttons in main_menu_series]
        if not main_menu_series:
            trade_main(message=message,
                       text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –∑–∞–∫—Ä—ã—Ç')
            return 1
        main_menu_series.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ Trade-in'])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = main_menu_series
        client.send_message(chat_id=message.chat.id,
                            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é',
                            reply_markup=keyboard)
        UserStepModel.objects.filter(
            user__user_id=message.chat.id
        ).delete()
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ trade_series")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ trade_series'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üìç')
def trade_first_step(message, text='–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'):
    try:
        device = message.text.replace('üìç ', '')
        UserStepModel.objects.create(
            user=TelegramUserModel.objects.filter(user_id=message.chat.id)[0],
            steps_ok='1',
            cost=TradeInSeriesModel.objects.filter(name=device)[0].start_cost,
            device=device
        )
        steps = TradeInStepModel.objects.filter(series__name=device).filter(step=1)[0]
        steps = VariableFoeStepModel.objects.filter(step=steps.id)
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = [['üìå ' + i.name] for i in steps]
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            reply_markup=keyboard)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ trade_first_step")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ trade_first_step'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üìå')
def trade_again_step(message):
    try:
        user_data = UserStepModel.objects.filter(
            user__user_id=message.chat.id,
        )
        device = user_data[0].device
        step = user_data[0].steps_ok
        max_step = TradeInSeriesModel.objects.filter(
            name=device
        )[0].max_step
        if int(max_step) != int(step):
            variable = VariableFoeStepModel.objects.filter(
                step__step=step,
                name=message.text.replace('üìå ', '')
            )
            new_cost = user_data[0].cost + variable[0].increase - variable[0].decrease
            step = str(int(step) + 1)
            UserStepModel.objects.filter(
                user__user_id=message.chat.id,
            ).update(
                steps_ok=step,
                cost=new_cost,
            )
            nex = TradeInStepModel.objects.filter(
                step=step,
                series__name=device
            )
            name = nex[0].name
            next = VariableFoeStepModel.objects.filter(
                step=nex[0].id
            )
            keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard.keyboard = [['üìå ' + i.name] for i in next]
            client.send_message(chat_id=message.chat.id,
                                text=name,
                                reply_markup=keyboard)

        else:

            variable = VariableFoeStepModel.objects.filter(
                step__step=step,
                name=message.text.replace('üìå ', '')
            )
            new_cost = user_data[0].cost + variable[0].increase - variable[0].decrease
            UserStepModel.objects.filter(
                user__user_id=message.chat.id,
            ).update(
                cost=new_cost,
            )
            text = f'–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n' \
                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å {str(new_cost)}'
            trade_main(message=message,
                       text=text)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ trade_again_step")


def get_trade_products():
    try:
        result = Product.objects.values('name').filter(
            sell=False,
            booking=False,
            moderation=True,
            state__state='–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã–¥–∞–Ω–æ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∑–∞–º–µ–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–º—É'
                         ' —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–º '
                         '—Ü–µ–Ω—Ç—Ä–µ (–ê–°–¶) Apple. –ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ. '
        )
        list_all = []
        for i in result:
            list_all.append(i['name'])
        return list_all

    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ get_trade_products")


trade_product = get_trade_products()


@client.message_handler(commands=['sale'])
@client.message_handler(func=lambda message: message.text == 'üí•–°–∫–∏–¥–∫–∏üí•')
def tradein_model(message):
    try:
        sale = get_sale(message)
        if not sale:
            start_message(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return 0
        result = [['üîª ' + x] for x in sorted(sale)]
        result.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = result
        client.send_message(chat_id=message.chat.id,
                            text='–í–æ—Ç –≤—Å–µ —Å–∫–∏–¥–∫–∏',
                            reply_markup=keyboard_products,
                            parse_mode='HTML')
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ tradein_model")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ tradein_model'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text == '–†–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
def main_menu_repair(message, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    try:
        try:
            UserChoiceModel.objects.filter(
                user_id=TelegramUserModel.objects.get(
                    user_id=message.chat.id
                ).id
            ).delete()
        except EOFError as _:
            logger.error("–û—à–∏–±–∫–∞ –í–ù–£–¢–†–ò main_menu_repair")

        buttons = ButtonModel.objects.all()
        buttons = [['üîß ' + i.name_button] for i in buttons]
        buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = buttons
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            reply_markup=keyboard_products,
                            parse_mode='MarkdownV2')
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ main_menu_repair")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ main_menu_repair'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üîß')
def service_repair(message):
    try:
        device = message.text.replace('üîß ', '').split('|', 1)[0]
        id_user = TelegramUserModel.objects.get(
            user_id=message.chat.id
        ).id
        user_device = UserChoiceModel.objects.filter(
            user_id=id_user
        )
        if not user_device:
            user_query = TelegramUserModel.objects.get(
                user_id=message.chat.id,
            )
            UserChoiceModel.objects.create(
                user_id=user_query,
                cost=0,
                device=device
            )
            buttons = ServiceModels.objects.filter(
                series__name_button=message.text.replace('üîß ', '')
            )
            buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + \
                      [['üîß ' +
                        i.name +
                        ' | ' +
                        str(i.cost) +
                        'p'
                        ] for i in buttons]
            buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
            keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard_products.keyboard = buttons
            client.send_message(chat_id=message.chat.id,
                                text='text',
                                reply_markup=keyboard_products)
            return 1

        else:
            user_cost = user_device[0].cost
            user_device = user_device[0].device
            up = ServiceModels.objects.filter(
                series__name_button=user_device,
                name=device
            )

            buttons = ButtonModel.objects.get(
                name_button=user_device
            )
            buttons = ServiceModels.objects.filter(
                series=buttons
            )
            id_user = TelegramUserModel.objects.get(
                user_id=message.chat.id
            )
            id_user = UserChoiceModel.objects.get(
                user_id=id_user
            )
            xx = UseService.objects.filter(
                user=id_user,
            )
            if message.text in [i.name_service for i in xx]:
                pass
            else:
                UseService.objects.create(
                    user=id_user,
                    name_service=message.text
                )
                UserChoiceModel.objects.update(
                    device=user_device,
                    cost=str(int(user_cost) + int(up[0].cost))
                )
            buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + \
                      [['üîß ' +
                        i.name +
                        ' | ' +
                        str(i.cost) +
                        'p'
                        ] for i in buttons]
            buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
            keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard_products.keyboard = buttons
            client.send_message(chat_id=message.chat.id,
                                text=f'{message.text.replace("üîß ", "")}'
                                     f'\n\n'
                                     f'–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                                reply_markup=keyboard_products)
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ service_repair")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ service_repair'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞')
def service_repair_exit(message):
    try:
        services = UseService.objects.filter(
            user_id=UserChoiceModel.objects.filter(
                user_id=TelegramUserModel.objects.get(
                    user_id=message.chat.id
                ).id
            )[0].id
        )
        cost = UserChoiceModel.objects.filter(
            user_id=TelegramUserModel.objects.get(
                user_id=message.chat.id
            ).id
        )[0].cost
        text = "".join([' -- ' + i.name_service.replace("üîß ", "")
                        + '\n' for i in services])
        text = '–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏: \n' + text
        text = text + f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n{str(cost)} —Ä—É–±–ª–µ–π'

        start_message(
            message=message,
            text=text
        )
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ service_repair_exit")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ service_repair_exit'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


text_trade = """
–ü–æ–º–∏–º–æ –Ω–æ–≤—ã—Ö –∏ –±/—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞, –≤ –ø—Ä–æ—Å—Ç–æ–Ω–∞—Ä–æ–¥—å–µ ‚Äî –æ–±–º–µ–Ω–∫–∞

–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–º–µ–Ω–∫–∞? 

‚Äî –û–±–º–µ–Ω–∫–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ, –Ω–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,\
 –∞ –∏–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ. 

–û—Ç–∫—É–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–∞–∫–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã?

‚Äî –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–∏—Ç—É–∞—Ü–∏—é: —É –Ω–∞—Å –µ—Å—Ç—å –±/—É iPhone 11 —Å –Ω–µ—Ä–∞–±–æ—á–∏–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º/–∫–∞–º–µ—Ä–æ–π/–¥–∏–Ω–∞–º–∏–∫–æ–º –∏ —Ç.–¥. ,\
 —Ç.–µ. –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π –ø–æ–ª–æ–º–∫–æ–π, –º—ã –æ—Ç–Ω–æ—Å–∏–º –µ–≥–æ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: iPort, Re:Store, Amos, B2X, \
 Secret Service –∏–ª–∏ –∫ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –¥–∏–ª–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º. \
 –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã—è–≤–ª—è–µ—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –æ–±–º–µ–Ω–∫—É.\
  –≠—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π Apple 1 –≥–æ–¥. –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å \
  –æ–±–º–µ–Ω–∞ ‚Äî –†–æ—Å—Ç–µ—Å—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–º–µ–Ω—è—é—Ç—Å—è –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§. 

‚Äî –ö–∞–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –û–±–º–µ–Ω–∫–∏?

–¢–∞–∫–∞—è –∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞–∫ –∏ –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ—Ä–æ–±–∫–µ, 1 –≥–æ–¥. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º\
 —Å–∞–π—Ç–µ Apple –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (932) 222-54-45
"""


@client.message_handler(func=lambda message: message.text == '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–±–º–µ–Ω–∫–∏')
def trade_again_step(message):
    try:
        tr_products = [['üîÅ ' + i.name_button] for i in
                       Trade.objects.all()]
        if not tr_products:
            start_message(message=message,
                          text='–í —Ä–∞–∑–¥–µ–ª–µ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ')
            return 1
        tr_products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = tr_products
        client.send_message(chat_id=message.chat.id,
                            text='https://www.youtube.com/watch?v=ARM-ZnxJcYI',
                            disable_web_page_preview=False,
                            )

        client.send_message(chat_id=message.chat.id,
                            text=text_trade,
                            reply_markup=keyboard,
                            )
    except IndexError as _:
        logger.error("–û—à–∏–±–∫–∞ trade_again_step")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ trade_again_step'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(commands=['GetService'])
def admin_main_menu(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():

        text = '–°—Ç–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: /static_today' \
               '\n–°—Ç–∞—Ç –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /stat_all_user' \
               '\n–°—Ç–∞—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º: ...' \
               '\n–°—Ç–∞—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: ...' \
               '\n\n–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–æ—Å—Ç–µ—Å—Ç: /ru_test_False' \
               '\n–í–∫–ª—é—á–∏—Ç—å —Ä–æ—Å—Ç–µ—Å—Ç: /ru_test_True'
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            )
    else:
        start_message(message)


@client.message_handler(commands=['static_today'])
def admin_hours_users(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():

        text = '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º\n'
        stat = StaticUserHourModel.objects.all()
        today_reg = datetime.date.today().strftime('%m/%d/%Y')
        stat_count = stat.filter(date_created=today_reg).count()
        text += '–í—Å–µ–≥–æ: ' + str(stat_count) + '\n\n'
        _time = int((datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H')) + 1
        i = 0
        while i != _time:
            s = stat.filter(hour_created=i, date_created=today_reg).count()
            st = f'{i}:00  -- {s} —á–µ–ª.\n'
            text += st
            i += 1
        client.send_message(chat_id=message.chat.id,
                            text=text + '\n\n\n –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é /GetService',
                            )
    else:
        start_message(message)


@client.message_handler(commands=['stat_all_user'])
def admin_hours_users(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():

        text = '–ö–æ–ª-–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
        today_reg = datetime.date.today().strftime('%m/%d/%Y')
        stat = UserModel.objects.all()
        stat_count = stat.count()
        text += '–í—Å–µ–≥–æ: ' + str(stat_count)

        today_reg = stat.filter(date_created=today_reg).count()
        text += '\n–°–µ–≥–æ–¥–Ω—è: ' + str(today_reg)

        client.send_message(chat_id=message.chat.id,
                            text=text + '\n\n\n –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é /GetService',
                            )
    else:
        start_message(message)


@client.message_handler(commands=['ru_test_False'])
def set_re_test_false(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():
        from tune_admin.models import SetTelegramModel
        SetTelegramModel.objects.all().update(flag_test=False)
        client.send_message(chat_id=message.chat.id,
                            text='–ì—Ä—É–ø–ø–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –†–æ—Å—Ç–µ—Å—Ç –í–´–ö–õ–Æ–ß–ï–ù–ê')
    else:
        start_message(message)


@client.message_handler(commands=['ru_test_True'])
def set_re_test_false(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():
        from tune_admin.models import SetTelegramModel
        SetTelegramModel.objects.all().update(flag_test=True)
        client.send_message(chat_id=message.chat.id,
                            text='–ì—Ä—É–ø–ø–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –†–æ—Å—Ç–µ—Å—Ç –í–ö–õ–Æ–ß–ï–ù–ê')
    else:
        start_message(message)


@client.message_handler(commands=['server_restart'])
def admin_hours_users(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():
        res = os.system('sudo supervisorctl status gunicorn | sed "s/.*[pid ]\([0-9]\+\)\,.*/\1/" | xargs kill -HUP')
        client.send_message(chat_id=message.chat.id,
                            text=f'–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {res}' + '\n\n\n –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –º–µ–Ω—é /GetService',
                            )
    else:
        start_message(message)


@client.message_handler(content_types=['text'])
def bitrix_client(message):
    try:

        if str(message.chat.id) != '572982939':
            if message.text.lower().split()[0] == '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|—É–∑–Ω–∞—Ç—å' or \
                    message.text.lower() == '–∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                start_message(message, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞,'
                                            ' –æ–Ω –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
                                            ' –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –Ω–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ üë©üèª‚Äçüíª')
            if message.text.lower() == '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
                start_message(message, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞,'
                                            ' –æ–Ω –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '
                                            '–∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –Ω–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ üë©üèª‚Äçüíª')
            jsn = message.__dict__.get('json')
            ts = {'update_id': 287246100,
                  'message': jsn}

            requests.post(URL_BITRIX, json=ts)
    except IndexError as _:
        logger.error(f"–û—à–∏–±–∫–∞ bitrix_client")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ bitrix_client'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(content_types=['voice'])
def voice(message):
    try:
        jsn = message.__dict__.get('json')
        exit_dict = {"update_id": 287246100, "message": jsn}
        requests.post(URL_BITRIX, json=exit_dict)
    except IndexError as _:
        logger.error(f"–û—à–∏–±–∫–∞ –û–¢–ü–†–ê–í–ö–ê –≥–æ–ª–æ—Å–æ–≤–æ–µ")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ bitrix_client –≥–æ–ª–æ—Å–æ–≤–æ–µ'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(content_types=['video'])
def video(message):
    try:
        jsn = message.__dict__.get('json')
        exit_dict = {"update_id": 287246100, "message": jsn}
        requests.post(URL_BITRIX, json=exit_dict)
    except IndexError as _:
        logger.error(f"–û—à–∏–±–∫–∞ –û–¢–ü–†–ê–í–ö–ê –≤–∏–¥–µ–æ")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ bitrix_client –≤–∏–¥–µ–æ'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@client.message_handler(content_types=['photo'])
def photo(message):
    try:
        jsn = message.__dict__.get('json')
        exit_dict = {"update_id": 287246100, "message": jsn}
        requests.post(URL_BITRIX, json=exit_dict)
    except IndexError as _:
        logger.error(f"–û—à–∏–±–∫–∞ –û–¢–ü–†–ê–í–ö–ê —Ñ–æ—Ç–æ")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–û—à–∏–±–∫–∞ bitrix_client —Ñ–æ—Ç–æ'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


@csrf_exempt
def bot(request):
    try:
        if request.META['CONTENT_TYPE'] == 'application/json':

            json_data = request.body.decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            if update.message:
                us_id = str(update.message.chat.id) + str(
                    (datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H'))
                list_uss = StaticUserHourModel.objects.all()
                list_uss = [str(i.user_id) for i in list_uss]
                message = update.message
                try:
                    if str(us_id) not in list_uss:
                        StaticUserHourModel.objects.create(
                            user_id=str(us_id),
                            date_created=datetime.date.today().strftime('%m/%d/%Y'),
                            hour_created=str((datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H')),
                            full_id=str(update.message.chat.username),
                        )
                        start_message(message=update.message,
                                      text='–£ –Ω–∞—Å –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã!\n'
                                           '–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                    else:
                        client.process_new_updates([update])
                except IndexError as _:
                    client.process_new_updates([update])
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—ã –ø–æ —á–∞—Å–∞–º (def bot)")
                    for i in admin_chat_id:
                        client.send_message(chat_id=i,
                                            text='–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—ã –ø–æ —á–∞—Å–∞–º (def bot)'
                                                 '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                                 '\n\nCHAT ID\n' + message.chat.id)

                list_user = UserModel.objects.all()
                list_user_id = [str(user_id.user_id) for user_id in list_user]

                try:
                    if str(message.chat.id) not in list_user_id:
                        UserModel.objects.create(
                            user_id=str(message.chat.id),
                            date_created=datetime.date.today().strftime('%m/%d/%Y'),
                            name=message.chat.username,
                            first_name=message.chat.first_name,
                            last_name=message.chat.last_name
                        )
                except IndexError as _:
                    client.process_new_updates([update])
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (def bot)")
                    for i in admin_chat_id:
                        client.send_message(chat_id=i,
                                            text='–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (def bot)'
                                                 '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                                 '\n\nCHAT ID\n' + message.chat.id)
        return HttpResponse(200)
    except IndexError as _:
        logger.error(f"–í–Ω–µ—à–Ω–∏–π –ø—Ä–∏–µ–º update (def bot)")
        for i in admin_chat_id:
            client.send_message(chat_id=i,
                                text='–í–Ω–µ—à–Ω–∏–π –ø—Ä–∏–µ–º update (def bot)'
                                     '\n\n–¢–ï–ö–°–¢: \n' + message.text +
                                     '\n\nCHAT ID\n' + message.chat.id)


# client.polling(non_stop=True)
