import time
from pprint import pprint
import datetime
import MySQLdb
import telebot
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.exceptions import PermissionDenied
import requests

from trade_in.models import TelegramUserModel, UserStepModel,TradeInDevicesModel,\
    TradeInSeriesModel, VariableFoeStepModel, TradeInStepModel
from trade_id.models import ButtonModel, ServiceModels, UserChoiceModel, UseService
from trade_trade.models import Trade

from .models import Product, Category, SeriesCategory, StaticUserHourModel,UserModel
from cost_models.models import DetailModel

TOKEN = '5239855839:AAGMSUsbode-6PO_sOwVlqPmr6XsoAHfhY4'
URL_BITRIX = 'https://im.bitrix.info/imwebhook/eh/6c529968ec581a32c38753edca1c926a1645891257/'
client = telebot.TeleBot(TOKEN, threaded=False)
menu_support = ['üì± iPhone', 'üì≤ iPad', 'üíª MacBook',
                'üéß AirPods', '‚åö Watch',
                '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
sup_callback = ['–ù–∞–∑–∞–¥ –∫ –ë/–£ iPhone', '–ù–∞–∑–∞–¥ –∫ –ë/–£ iPad', '–ù–∞–∑–∞–¥ –∫ –ë/–£ MacBook',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ AirPods', '–ù–∞–∑–∞–¥ –∫ –ë/–£ Watch',
                '–ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']
path_to_media = '/home/apple/code/project1/tune/media/'





def get_category():
    result = ['üì± iPhone', 'üì≤ iPad', 'üíª MacBook', 'üéß AirPods', '‚åö Watch', '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']
    return result


def get_series(name_series):
    result = SeriesCategory.objects.filter(category__icontains=f'{name_series}')
    list_1 = []
    for i in result:
        list_1.append(i.category)
    return list_1


def get_detail_product(name_product):
    result = Product.objects.filter(name=f'{name_product}').filter(sell=False).filter(booking=False).filter(
        moderation=True)
    return result


def get_not_category():
    result = Product.objects.all().filter(category_id=6)
    list_device = []
    for r in result:
        list_device.append(r.name)
    return list_device


def get_all_products():
    result = Product.objects.values('name').filter(sell=False).filter(booking=False).filter(moderation=True)
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


def max_all_products():
    result = Product.objects.values('name').filter(sell=False).filter(booking=False).filter(moderation=True)
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


def get_current_product():
    result = Product.objects.values('series_id').filter(sell=False).filter(booking=False).filter(moderation=True)
    list_id = []
    exit = []
    for i in result:
        list_id.append(i['series_id'])
    for i in list_id:
        result = SeriesCategory.objects.values('category').filter(id=i)
        exit.append(result[0]['category'])
    return list(set(exit))


def get_products(category_name):
    id_category = SeriesCategory.objects.values('id').filter(category__icontains=f'{category_name}')
    result = Product.objects.values('name').filter(series_id=id_category[0]['id']).filter(booking=False).filter(
        sell=False).filter(moderation=True)
    list_product = []
    for i in result:
        list_product.append(i['name'])
    return list_product


def get_price(price_min, price_max):
    result = Product.objects.values('name').filter(price__gte=price_min, price__lte=price_max).filter(
        name__icontains=f'{"iPhone"}').filter(booking=False).filter(sell=False).filter(moderation=True)
    result = [['‚ãÖ ' + str(x['name'])] for x in result]
    print(result)
    return result


def get_max_min_price(cost):
    dia = [[1000, 15000],
           [15000, 25000],
           [25000, 35000],
           [35000, 45000],
           [45000, 55000],
           [55000, 70000],
           [70000, 100000],
           [100000, 130000],
           [130000, 200000], ]
    for i in dia:
        if i[0] <= cost <= i[1]:
            return [i[0], i[1]]


def get_sale():
    result = Product.objects.values('name'). \
        filter(sell=False). \
        filter(booking=False). \
        filter(moderation=True). \
        filter(sale=True)
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


sale_tmp = get_sale()

current_category = list(set([x[1] for x in get_current_product()]))
all_products = [x for x in get_all_products()]
current_product = get_current_product()
max_products = [x for x in max_all_products()]


def update_products():
    global sale_tmp
    global current_category
    global all_products
    global current_product
    global max_products
    sale_tmp = get_sale()

    current_category = list(set([x[1] for x in get_current_product()]))
    all_products = [x for x in get_all_products()]
    current_product = get_current_product()
    max_products = [x for x in max_all_products()]

main_menu = TradeInDevicesModel.objects.all()
main_menu = [[buttons.name] for buttons in main_menu]
main_menu.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])


import os



red = StaticUserHourModel.objects.all()
ready_user_today = [str(i.full_id) for i in red if
                    str(i.date_created) == str(datetime.date.today().strftime('%m/%d/%Y'))]


@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å–∫')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞–ª–æ')
@client.message_handler(func=lambda message: message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
@client.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å')
@client.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ä—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@client.message_handler(commands=['start'])
def start_message(message, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?'):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('üí•–°–∫–∏–¥–∫–∏üí•')
    btn2 = telebot.types.KeyboardButton('–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    btn3 = telebot.types.KeyboardButton('–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    btn4 = telebot.types.KeyboardButton('Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
    btn5 = telebot.types.KeyboardButton('–ú–æ–π –±—é–¥–∂–µ—Ç')
    # btn6 = telebot.types.KeyboardButton('–û–±–º–µ–Ω–∫–∞')
#     btn7 = telebot.types.KeyboardButton('FAQ')
    btn8 = telebot.types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
    markup.add(btn1)
    markup.add(btn2, btn3)
    markup.add(btn4, btn5)
    #     markup.add(btn5)
#     markup.add(btn7)
    markup.add(btn8)
    client.send_message(message.chat.id, text=text, reply_markup=markup)


#     base_datetime = datetime.datetime.now().strftime('%H')
#     tt = str(base_datetime) + str(message.chat.id)

#     if tt not in ready_user_today:
#         ready_user_today.append(tt)
#         StaticUserHourModel.objects.create(
#             user_id=str(massage.chat.id),
#             date_created=str(datetime.date.today().strftime('%m/%d/%Y')),
#             hour_created=int(base_datetime),
#             full_id=str(tt),
#         )
    

@client.message_handler(commands=['sm'])
@client.message_handler(func=lambda message: message.text == '–ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£')
def support_menu(message, text='–í–æ—Ç –≤—Å–µ –ë\–£'):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('üì± iPhone')
    btn2 = telebot.types.KeyboardButton('üì≤ iPad')
    btn3 = telebot.types.KeyboardButton('üíª MacBook')
    btn4 = telebot.types.KeyboardButton('‚åö Watch')
    btn5 = telebot.types.KeyboardButton('üéß AirPods')
    btn8 = telebot.types.KeyboardButton('‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    btn9 = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    markup.add(btn4, btn5)
    markup.add(btn2, btn3)

    markup.add(btn8)
    markup.add(btn9)
    client.send_message(message.chat.id, text=text, reply_markup=markup)



@client.message_handler(func=lambda message: message.text == '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def supp_product(message):
    """
    –û–±—Ä–∞—Ç–æ–∫–∞ –¥–ª—è –ë\–£
    """
    products = [[x] for x in get_products(message.text.split()[1])]
    products.sort()
    if message.text in get_not_category():
        products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    else:
        products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])

    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = products
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + message.text,
                        reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text in menu_support)
@client.message_handler(func=lambda message: " ".join(message.text.split()[1:5]) in sup_callback)
def support_models(message):
    """
    –ü–æ–∫–∞–∂–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
    :param message:
    :return:
    """

    if len(message.text.split()) <= 2:
        model = message.text.split()[1]
    else:
        xxx = message.text.split()
        model = xxx[4]

    models = [x for x in get_series(model) if x in current_product]
    if models == 'iPhone':
        bce = ['iPhone 5', 'iPhone 6 / 6+ / 6s / 6s+',
               'iPhone 7 / 7+', 'iPhone 8 / 8+',
               'iPhone X / XS / XS Max', 'iPhone 11 / Pro / Max',
               'iPhone 12 / Pro / Max / Mini', 'iPhone 13 / Pro / Max / Mini',
               'iPhone SE / XR']

        ect = models.copy()

        models = bce
        x = bce.copy()
        for b in ect:
            if b in x:
                x.remove(b)
        for i in x:
            models.remove(i)

    if models == []:
        support_menu(message, text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æüòî\n'
                                   '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–∞–≤–ª–µ–Ω–∏—è–º–∏ —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ\n'
                                   'https://t.me/tuneapple üëà')

        return 0

    models = [[x] for x in models]

    models.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = models
    client.send_message(chat_id=message.chat.id,
                        text=f'–í–æ—Ç —á—Ç–æ –µ—Å—Ç—å –∏–∑ {model}',
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text in current_product)
def support_products(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–æ–Ω–æ–π –º–æ–¥–µ–ª–∏/ —Å–µ—Ä–∏–∏
    :param message:
    :return:
    """
    print(message.chat.id)
    products = [x for x in get_products(message.text)]

    products.sort()
    products = [[x] for x in products]

    if message.text in get_not_category():
        products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    else:
        products.append([f'‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ {message.text.split()[0]}'])

    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = products
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + message.text,
                        reply_markup=keyboard_products)


dig = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ]

def get_trade_state(name_to_search):
    result = Trade.objects.filter(name_button=f'{name_to_search}')
    return result

@client.message_handler(func=lambda message: message.text in all_products)
@client.message_handler(func=lambda message: '‚ãÖ' in message.text)
@client.message_handler(func=lambda message: message.text.split()[0] == 'üîª')
def show_model(message, extra=None):
    tmp = message.text
    name_to_search = message.text
    try:
        name = message.text.split()
        if name[0] == '‚ãÖ':
            name.remove('‚ãÖ')
        if '‚ãÖ' in message.text:
            name_to_search = message.text.replace('‚ãÖ ', '')

        if name[0] == 'üîª':
            name.remove('üîª')
        if 'üîª' in message.text:
            name_to_search = message.text.replace('üîª ', '')

        if name[0] == 'üîÅ':
            name.remove('üîÅ')
        if 'üîÅ' in message.text:
            name_to_search = message.text.replace('üîÅ ', '')
        name1 = name[0] + ' ' + name[1][0]
        products = []

        if 'üîÅ' not in message.text and \
                len(name[1]) > 1 or message.text in get_not_category():

            if message.text in get_not_category():

                products = get_not_category()
            elif (name[1][0] + name[1][1] == 'XR' or name[1][0] + name[1][
                1] == 'SE') and 'watch' not in message.text.lower():

                xr = name[1][0] + name[1][1]
                products = get_products(xr)
            elif name[1][0] in dig and name[1][1] in dig:

                name_11 = name[0] + ' ' + name[1]
                products = get_products(name_11)
            else:
                products = get_products(name1)

        if len(name[1]) == 1 and message.text not in get_not_category():
            products = get_products(name1)

        if message.text in products:
            products.remove(message.text)

        detail_product = get_detail_product(name_to_search)
        if '‚ãÖ' in tmp:
            current_price = get_max_min_price(detail_product[0].price)
            products = get_price(current_price[0], current_price[1])
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. ' + detail_product[
                                    0].article])
            products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])

        elif 'üîª' in tmp:
            products = [['üîª ' + x] for x in sale_tmp]
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + tmp + ' –ê—Ä—Ç. ' + detail_product[0].article])
            products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

        elif 'üîÅ' in tmp:
            detail_product = get_trade_state(name_to_search)
            products = [['üîÅ ' + x.name_button] for x in Trade.objects.all()]
            if [tmp] in products:
                products.remove([tmp])
                products.insert(0,
                                ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + tmp])
            products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

        else:
            products = [[x] for x in products]
            products.insert(0,
                            ['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π' + '\n' + message.text + ' –ê—Ä—Ç. ' + detail_product[
                                0].article])
            if message.text in get_not_category():
                products.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ë/–£ ' + ''])
            else:
                products.append(['‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –∫ –ë/–£ ' + message.text.split()[0]])
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = products
        if 'üîÅ' not in tmp:
            if detail_product[0].image_3:
                f1, f2, f3 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                             open(path_to_media + str(detail_product[0].image_2), 'rb'), \
                             open(path_to_media + str(detail_product[0].image_3), 'rb')
                f1, f2, f3 = f1.read(), f2.read(), f3.read()
                client.send_media_group(chat_id=message.chat.id, media=[
                    telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text),
                    telebot.types.InputMediaPhoto(f2),
                    telebot.types.InputMediaPhoto(f3), ])
                client.send_message(chat_id=message.chat.id,
                                    text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                    reply_markup=keyboard)
            else:
                f1, f2 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                         open(path_to_media + str(detail_product[0].image_2), 'rb')

                f1, f2 = f1.read(), f2.read()
                client.send_media_group(chat_id=message.chat.id, media=[
                    telebot.types.InputMediaPhoto(f1, caption=detail_product[0].base_text),
                    telebot.types.InputMediaPhoto(f2)])
                client.send_message(chat_id=message.chat.id,
                                    text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                                    reply_markup=keyboard)
        else:
            print(detail_product)
            f1, f2 = open(path_to_media + str(detail_product[0].image_1), 'rb'), \
                     open(path_to_media + str(detail_product[0].image_2), 'rb')

            f1, f2 = f1.read(), f2.read()
            client.send_media_group(chat_id=message.chat.id, media=[
                telebot.types.InputMediaPhoto(f1, caption=detail_product[0].text),
                telebot.types.InputMediaPhoto(f2)])
            client.send_message(chat_id=message.chat.id,
                                text='–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
                                reply_markup=keyboard)
    except:
        return 0


@client.message_handler(commands=['nm'])
@client.message_handler(func=lambda message: message.text == '–ù–æ–≤—ã–µ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
def new_model(message):
    start_message(message,
                  text='–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.\n–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+7 (932) 222-54-45')


@client.message_handler(commands=['mb'])
@client.message_handler(func=lambda message: message.text == '–ú–æ–π –±—é–¥–∂–µ—Ç')
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç')
def my_budget(message, text='–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç'):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–æ—Ç 1000 –¥–æ 15000')
    btn2 = telebot.types.KeyboardButton('–æ—Ç 15000 –¥–æ 25000')
    btn3 = telebot.types.KeyboardButton('–æ—Ç 25000 –¥–æ 35000')
    btn4 = telebot.types.KeyboardButton('–æ—Ç 45000 –¥–æ 55000')
    btn5 = telebot.types.KeyboardButton('–æ—Ç 55000 –¥–æ 70000')
    btn6 = telebot.types.KeyboardButton('–æ—Ç 70000 –¥–æ 100000')
    btn7 = telebot.types.KeyboardButton('–æ—Ç 100000 –¥–æ 130000')
    btn8 = telebot.types.KeyboardButton('–æ—Ç 130000 –¥–æ 200000')
    btn9 = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5, btn6)
    markup.add(btn7, btn8)
    markup.add(btn9)
    client.send_message(message.chat.id, text=text, reply_markup=markup)



@client.message_handler(func=lambda message: message.text.split()[0] == '–æ—Ç')
def my_budget_show(message):
    if len(message.text.split()) >= 4:
        try:
            price_min = message.text.split()[1]
            price_max = message.text.split()[3]
            keyboard_products = get_price(price_min, price_max)

            if keyboard_products == []:
                my_budget(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return 0
            keyboard_products.sort()
            keyboard_products.append(['‚¨ÖÔ∏è–î—Ä—É–≥–æ–π –±—é–¥–∂–µ—Ç'])

            keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard_category.keyboard = keyboard_products
            client.send_message(chat_id=message.chat.id,
                                text='–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ –í–∞—à–µ–º—É –±—é–¥–∂–µ—Ç—É',
                                reply_markup=keyboard_category)
        except:
            pass



# @client.message_handler(commands=['sale'])
# @client.message_handler(func=lambda message: message.text == 'üí•–°–∫–∏–¥–∫–∏üí•')
# def tradein_model(message):
#     sale = get_sale()
#     result = [['üîª ' + x] for x in sorted(sale)]
#     result.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
#     keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
#     keyboard_products.keyboard = result
#     client.send_message(chat_id=message.chat.id,
#                         text='–í–æ—Ç –≤—Å–µ —Å–∫–∏–¥–∫–∏',
#                         reply_markup=keyboard_products)
#
#

from faq.models import FAQModel

faq_info = FAQModel.objects.all()
buttons_info = [['üí° ' + i.name] for i in faq_info]
buttons_info.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])


@client.message_handler(func=lambda message: message.text == 'FAQ')
def main_menu_faq(message, text='–í—ã–±–∏—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ'):
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = buttons_info
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üí°')
def main_menu_faq(message, text='–í—ã–±–∏—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ'):
    text_message = message.text.replace('üí° ', '')
    info = None
    for i in faq_info:
        if i.name == text_message:
            info = i
            break

    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = buttons_info
    if info.image:
        photo = open(path_to_media + str(info.image), 'rb')
        photo = photo.read()
        client.send_photo(
            chat_id=message.chat.id,
            caption=info.text,
            photo=photo,
            reply_markup=keyboard,
        )
    if not info.image:
        client.send_message(chat_id=message.chat.id,
                            text=info.text,
                            reply_markup=keyboard)

@client.message_handler(commands=['ti'])
@client.message_handler(func=lambda message: message.text == 'Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
def tradein_model(message):
    start_message(message, text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ trade-in –¥–æ—Å—Ç—É–ø–Ω–∞!\n–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–≤–æ–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Apple –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É (—Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ trade-in).\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+7 (932) 222-54-45')

    
@client.message_handler(commands=['ti'])
@client.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ Trade-in')
@client.message_handler(func=lambda message: message.text == 'Trade-in / –ü—Ä–æ–¥–∞–∂–∞')
def trade_main(message, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    start_message(message, text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ trade-in –¥–æ—Å—Ç—É–ø–Ω–∞!\n–° –ø–æ–º–æ—â—å—é –Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–≤–æ–µ —Å—Ç–∞—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Apple –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É (—Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ trade-in).\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª\n–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: \n+7 (932) 222-54-45')

#     id_user = message.chat.id
#     if id_user not in list_user_id:
#         list_user_id.append(id_user)
#         print(list_user_id)
#         TelegramUserModel.objects.create(
#             user_id=id_user,
#             username=message.chat.username,
#             first_name=message.chat.first_name,
#         )

#     keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
#     keyboard.keyboard = main_menu
#     client.send_message(chat_id=message.chat.id,
#                         text=text,
#                         reply_markup=keyboard)


@client.message_handler(func=lambda message: message.text.split()[0] == '‚ôªÔ∏è')
def trade_series(message, text='–ú–µ–Ω—é Trade-in'):
    device = message.text.split()[1]
    main_menu_series = TradeInSeriesModel.objects.filter(name__icontains=device)
    main_menu_series = [['üìç ' + buttons.name] for buttons in main_menu_series]
    if not main_menu_series:
        trade_main(message=message,
                   text='–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –∑–∞–∫—Ä—ã—Ç')
        return 1
    main_menu_series.append(['‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ Trade-in'])
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = main_menu_series
    client.send_message(chat_id=message.chat.id,
                        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é',
                        reply_markup=keyboard)
    UserStepModel.objects.filter(
        user__user_id=message.chat.id
    ).delete()


@client.message_handler(func=lambda message: message.text.split()[0] == 'üìç')
def trade_first_step(message, text='–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'):
    device = message.text.replace('üìç ', '')
    UserStepModel.objects.create(
        user=TelegramUserModel.objects.filter(user_id=message.chat.id)[0],
        steps_ok='1',
        cost=TradeInSeriesModel.objects.filter(name=device)[0].start_cost,
        device=device
    )
    steps = TradeInStepModel.objects.filter(series__name=device).filter(step=1)[0]
    steps = VariableFoeStepModel.objects.filter(step=steps.id)
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = [['üìå ' + i.name] for i in steps]
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üìå')
def trade_again_step(message, text='2'):
    user_data = UserStepModel.objects.filter(
        user__user_id=message.chat.id,
    )
    device = user_data[0].device
    step = user_data[0].steps_ok
    max_step = TradeInSeriesModel.objects.filter(
        name=device
    )[0].max_step
    if int(max_step) != int(step):
        variable = VariableFoeStepModel.objects.filter(
            step__step=step,
            name=message.text.replace('üìå ', '')
        )
        new_cost = user_data[0].cost + variable[0].increase - variable[0].decrease
        step = str(int(step) + 1)
        UserStepModel.objects.filter(
            user__user_id=message.chat.id,
        ).update(
            steps_ok=step,
            cost=new_cost,
        )
        nex = TradeInStepModel.objects.filter(
            step=step,
            series__name=device
        )
        name = nex[0].name
        next = VariableFoeStepModel.objects.filter(
            step=nex[0].id
        )
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.keyboard = [['üìå ' + i.name] for i in next]
        client.send_message(chat_id=message.chat.id,
                            text=name,
                            reply_markup=keyboard)

    else:
        variable = VariableFoeStepModel.objects.filter(
            step__step=step,
            name=message.text.replace('üìå ', '')
        )
        new_cost = user_data[0].cost + variable[0].increase - variable[0].decrease
        UserStepModel.objects.filter(
            user__user_id=message.chat.id,
        ).update(
            cost=new_cost,
        )
        text = f'–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞!\n' \
               f'–°—Ç–æ–∏–º–æ—Å—Ç—å {str(new_cost)}'
        trade_main(message=message,
                   text=text)


def get_trade_products():
    result = Product.objects.values('name').filter(
        sell=False,
        booking=False,
        moderation=True,
        state__state='–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã–¥–∞–Ω–æ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∑–∞–º–µ–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–º '
                     '—Ü–µ–Ω—Ç—Ä–µ (–ê–°–¶) Apple. –ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ. '
    )
    list_all = []
    for i in result:
        list_all.append(i['name'])
    return list_all


trade_product = get_trade_products()


@client.message_handler(commands=['sale'])
@client.message_handler(func=lambda message: message.text == 'üí•–°–∫–∏–¥–∫–∏üí•')
def tradein_model(message):
    sale = get_sale()
    result = [['üîª ' + x] for x in sorted(sale)]
    result.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = result
    client.send_message(chat_id=message.chat.id,
                        text='–í–æ—Ç –≤—Å–µ —Å–∫–∏–¥–∫–∏',
                        reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text == '–†–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
def main_menu_repair(message, text='–í—ã–±–∏—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'):
    try:
        UserChoiceModel.objects.filter(
            user_id=TelegramUserModel.objects.get(
                user_id=message.chat.id
            ).id
        ).delete()
    except:
        pass

    buttons = ButtonModel.objects.all()
    buttons = [['üîß ' + i.name_button] for i in buttons]
    buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = buttons
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text.split()[0] == 'üîß')
def service_repair(message):
    device = message.text.replace('üîß ', '').split('|', 1)[0]
    id_user = TelegramUserModel.objects.get(
        user_id=message.chat.id
    ).id
    user_device = UserChoiceModel.objects.filter(
        user_id=id_user
    )
    if not user_device:
        user_query = TelegramUserModel.objects.get(
            user_id=message.chat.id,
        )
        user_device = UserChoiceModel.objects.create(
            user_id=user_query,
            cost=0,
            device=device
        )
        buttons = ServiceModels.objects.filter(
            series__name_button=message.text.replace('üîß ', '')
        )
        buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + \
                  [['üîß ' +
                    i.name +
                    ' | ' +
                    str(i.cost) +
                    'p'
                    ] for i in buttons]
        buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = buttons
        client.send_message(chat_id=message.chat.id,
                            text='text',
                            reply_markup=keyboard_products)
        return 1

    else:
        user_cost = user_device[0].cost
        user_device = user_device[0].device
        up = ServiceModels.objects.filter(
            series__name_button=user_device,
            name=device
        )

        buttons = ButtonModel.objects.get(
            name_button=user_device
        )
        buttons = ServiceModels.objects.filter(
            series=buttons
        )
        id_user = TelegramUserModel.objects.get(
            user_id=message.chat.id
        )
        id_user = UserChoiceModel.objects.get(
            user_id=id_user
        )
        xx = UseService.objects.filter(
            user=id_user,
        )
        if message.text in [i.name_service for i in xx]:
            pass
        else:
            UseService.objects.create(
                user=id_user,
                name_service=message.text
            )
            UserChoiceModel.objects.update(
                device=user_device,
                cost=str(int(user_cost) + int(up[0].cost))
            )
        buttons = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞']] + \
                  [['üîß ' +
                    i.name +
                    ' | ' +
                    str(i.cost) +
                    'p'
                    ] for i in buttons]
        buttons.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard_products.keyboard = buttons
        client.send_message(chat_id=message.chat.id,
                            text=f'{message.text.replace("üîß ", "")}'
                                 f'\n\n'
                                 f'–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                            reply_markup=keyboard_products)


@client.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Ä–µ–º–æ–Ω—Ç–∞')
def service_repair_exit(message):
    services = UseService.objects.filter(
        user_id=UserChoiceModel.objects.filter(
            user_id=TelegramUserModel.objects.get(
                user_id=message.chat.id
            ).id
        )[0].id
    )
    cost = UserChoiceModel.objects.filter(
        user_id=TelegramUserModel.objects.get(
            user_id=message.chat.id
        ).id
    )[0].cost
    print(cost)
    text = "".join([' -- ' + i.name_service.replace("üîß ", "")
                    + '\n' for i in services])
    text = '–í—ã–±—Ä–∞–Ω—ã–µ —É—Å–ª—É–≥–∏: \n' + text
    text = text + f'\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n{str(cost)} —Ä—É–±–ª–µ–π'

    start_message(
        message=message,
        text=text
    )

from trade_trade.models import Trade

text_trade = """
–ü–æ–º–∏–º–æ –Ω–æ–≤—ã—Ö –∏ –±/—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞, –≤ –ø—Ä–æ—Å—Ç–æ–Ω–∞—Ä–æ–¥—å–µ ‚Äî –æ–±–º–µ–Ω–∫–∞

–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±–º–µ–Ω–∫–∞? 

‚Äî –û–±–º–µ–Ω–∫–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ, –Ω–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∞ –∏–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ. 

–û—Ç–∫—É–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–∞–∫–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã?

‚Äî –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–∏—Ç—É–∞—Ü–∏—é: —É –Ω–∞—Å –µ—Å—Ç—å –±/—É iPhone 11 —Å –Ω–µ—Ä–∞–±–æ—á–∏–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º/–∫–∞–º–µ—Ä–æ–π/–¥–∏–Ω–∞–º–∏–∫–æ–º –∏ —Ç.–¥. , —Ç.–µ. –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π –ø–æ–ª–æ–º–∫–æ–π, –º—ã –æ—Ç–Ω–æ—Å–∏–º –µ–≥–æ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: iPort, Re:Store, Amos, B2X, Secret Service –∏–ª–∏ –∫ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –¥–∏–ª–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º. –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã—è–≤–ª—è–µ—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –æ–±–º–µ–Ω–∫—É. –≠—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π Apple 1 –≥–æ–¥. –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–±–º–µ–Ω–∞ ‚Äî –†–æ—Å—Ç–µ—Å—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–º–µ–Ω—è—é—Ç—Å—è –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§. 

‚Äî –ö–∞–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –û–±–º–µ–Ω–∫–∏?

–¢–∞–∫–∞—è –∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞–∫ –∏ –Ω–∞ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ—Ä–æ–±–∫–µ, 1 –≥–æ–¥. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ Apple –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (932) 222-54-45
"""


@client.message_handler(func=lambda message: message.text == '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–±–º–µ–Ω–∫–∏')
def trade_again_step(message):
    tr_products = [['üîÅ ' + i.name_button] for i in
                   Trade.objects.all()]
    if not tr_products:
        start_message(message=message,
                      text='–í —Ä–∞–∑–¥–µ–ª–µ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ')
        return 1
    tr_products.append(['‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = tr_products
    client.send_message(chat_id=message.chat.id,
                        text='https://www.youtube.com/watch?v=ARM-ZnxJcYI',
                        disable_web_page_preview=False,
                        )

    client.send_message(chat_id=message.chat.id,
                        text=text_trade,
                        reply_markup=keyboard,
                        )
    
    
@client.message_handler(commands=['getservice'])
def admin_main_menu(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():

        text = r'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: /static_today \n' \
               r'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º: ...\n'
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            )
    else:
        start_message(message)


@client.message_handler(commands=['static_today'])
def admin_hours_users(message):
    if UserModel.objects.filter(user_id=str(message.chat.id), super_user=True).exists():

        text = '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º\n\n'
        stat = StaticUserHourModel.objects.all()
        _time = int((datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H')) + 1
        i = 0
        while i != _time:
            s = stat.filter(hour_created=i).count()
            st = f'{i}:00  -- {s} —á–µ–ª.\n'
            text += st
            i += 1
        client.send_message(chat_id=message.chat.id,
                            text=text,
                            )
    else:
        start_message(message)
    
    
    
@client.message_handler(content_types=['text'])
def bitrix_client(message):
    if message.text not in max_products:
        if message.text.split()[0] != '–ë—é–¥–∂–µ—Ç':
            if message.chat.id != 572982939:
                try:
                    print('---', message.text)
                    jsn = message.__dict__.get('json')

                    ts = {'update_id': 287246100,
                          'message': {'message_id': jsn['message_id'],
                                      'from': {'id': jsn['from']['id'],
                                              'is_bot': False,
                                              'first_name': jsn['from']['first_name'],
                                              'language_code': jsn['from']['language_code']},
                                      'chat': {'id': jsn['chat']['id'],
                                              'first_name': jsn['chat']['first_name'],
                                              'type': jsn['chat']['type']},
                                      'date': jsn['date'],
                                      'text': jsn['text']}}

                    requests.post(URL_BITRIX, json=ts)

                    if message.text.lower().split()[0] == '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|—É–∑–Ω–∞—Ç—å' or \
                            message.text.lower() == '–∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                        start_message(message, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞,'
                        ' –æ–Ω –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –Ω–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ üë©üèª‚Äçüíª')
    #                     start_message(message, text='–°–µ–π—á–∞—Å –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞, –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n +7 (932) 222-54-45')
                    if message.text.lower() == '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
                        start_message(message, text='–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\n'
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ')
    #                     start_message(message, text='–°–µ–π—á–∞—Å –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞, –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n +7 (932) 222-54-45')
                except Exception as _:
                    try:
                        jsn = message.__dict__.get('json')
                        ts = {'update_id': 287246100,
                              'message': {'message_id': jsn['message_id'],
                                          'from': {'id': jsn['from']['id'],
                                                  'is_bot': False,
                                                  'first_name': jsn['from']['first_name'],
                                                  'language_code': jsn['from']['language_code']},
                                          'chat': {'id': jsn['chat']['id'],
                                                  'first_name': jsn['chat']['first_name'],
                                                  'type': jsn['chat']['type']},
                                          'date': jsn['date'],
                                          'text': jsn['text']}}

                        requests.post(URL_BITRIX, json=ts)
                        start_message(message, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üôÑ\n'
                                                    '–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
                    except:
                        start_message(message, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ üôÑ\n'
                                                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç'
                                                    '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –í–∏–∫—Ç–æ—Ä–∏–∏ @VasViktory')

@client.message_handler(content_types=['photo'])
def photo(message):
    jsn = message.__dict__.get('json')
    exit_dict = {"update_id": 287246100} | {"message":jsn}
    requests.post(URL_BITRIX, json=exit_dict)

    
    
    
    


from threading import Thread
import time


def func():
    while True:
        for i in list_user_today:
            s = i[:0] + i[0 + 1:]
            s = i[:0] + i[0 + 1:]

            if str(i) not in ready_user_today and int(i) not in ready_user_today:
                ready_user_today.append(str(i))
                StaticUserHourModel.objects.create(
                    user_id=str(s),
                    date_created=datetime.date.today().strftime('%m/%d/%Y'),
                    hour_created=str(i[0] + i[1]),
                    full_id=str(i),
                )
                time.sleep(1.5)

                
        time.sleep(0.3)



@csrf_exempt
def bot(request):
    try:
        if request.META['CONTENT_TYPE'] == 'application/json':

            json_data = request.body.decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
#             client.process_new_updates([update])
            us_id = str(update.message.chat.id) + str((datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H'))
            list_uss = StaticUserHourModel.objects.all()
            list_uss = [str(i.user_id) for i in list_uss]

            if str(us_id) not in list_uss:
                StaticUserHourModel.objects.create(
                            user_id=str(us_id),
                            date_created=datetime.date.today().strftime('%m/%d/%Y'),
                            hour_created=str((datetime.datetime.now() + datetime.timedelta(hours=3)).strftime('%H')),
                            full_id=str(update.message.chat.username),
                        )
                start_message(message=update.message, text='–£ –Ω–∞—Å –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã!\n–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            else:
                client.process_new_updates([update])
            list_user = UserModel.objects.all()
            list_user_id = [str(user_id.user_id) for user_id in list_user]
            
            message = update.message
            if str(message.chat.id) not in list_user_id:
                UserModel.objects.create(
                    user_id=str(message.chat.id),
                    date_created=datetime.date.today().strftime('%m/%d/%Y'),
                    name=message.chat.username,
                    first_name=message.chat.first_name,
                    last_name=message.chat.last_name
                )

            return HttpResponse(200)
    except:
        return HttpResponse(200)
                    
    return HttpResponse(200)
