# -*- coding: utf-8 -*-
from pprint import pprint

from django.db import models
from .text_default import text_default
from .new_post import send_post
import datetime

today = datetime.date.today()
tomorrow = today + datetime.timedelta(days=4)
state_1 = '–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—Å–∫—Ä—ã—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∞. –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.'
state_2 = '–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã–¥–∞–Ω–æ –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∑–∞–º–µ–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ (–ê–°–¶) Apple. –ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤–æ–µ, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.'
state_3 = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ. –ù–µ –∏–º–µ–µ—Ç —Ü–∞—Ä–∞–ø–∏–Ω –∏ –ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç–µ–π –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –∏ –¥–∏—Å–ø–ª–µ–µ.'
state_4 = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ. –ù–∞ –∫–æ—Ä–ø—É—Å–µ –∏/ –∏–ª–∏ –¥–∏—Å–ø–ª–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã –∏ –ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç–∏. –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º –∑–∞–∫—Ä–æ—é—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∑–∞—â–∏—Ç–Ω—ã–º —Å—Ç–µ–∫–ª–æ–º/—á–µ—Ö–ª–æ–º.'
state_5 = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ. –ù–∞ –∫–æ—Ä–ø—É—Å–µ –∏/ –∏–ª–∏ –¥–∏—Å–ø–ª–µ–µ –µ—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã –∏ –ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç–∏. –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º –∑–∞–∫—Ä–æ—é—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∑–∞—â–∏—Ç–Ω—ã–º —Å—Ç–µ–∫–ª–æ–º/—á–µ—Ö–ª–æ–º.'
states = [(state_1, '–ù–æ–≤—ã–π'),
          (state_2, '–û–±–º–µ–Ω–∫–∞'),
          (state_3, '–ö–∞–∫ –Ω–æ–≤—ã–π'),
          (state_4, '–û—Ç–ª–∏—á–Ω–æ–µ'),
          (state_5, '–•–æ—Ä–æ—à–µ–µ ')
          ]


class StateModel(models.Model):
    state = models.CharField('–¢–µ–∫—Å—Ç', max_length=255)

    class Meta:
        verbose_name = '–°–æ—Å—Ç–æ—è–Ω–∏–µ'
        verbose_name_plural = '–°–æ—Å—Ç–æ—è–Ω–∏—è'

    def __str__(self):
        return self.state



kit_1 ='–¢–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
kit_2 = '–ö–æ—Ä–æ–±–∫–∞'
kit_3 = '–ö–æ—Ä–æ–±–∫–∞, –∫–∞–±–µ–ª—å Lightning ‚Äî USB-C –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—Ä—è–¥–∫–∏'
kit_4 = '–ö–∞–±–µ–ª—å Lightning ‚Äî USB-C –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—Ä—è–¥–∫–∏'
kit_5 = '–ö–æ—Ä–æ–±–∫–∞, –∫–∞–±–µ–ª—å Lightning ‚Äî USB –¥–ª—è –∑–∞—Ä—è–¥–∫–∏'
kit_6 = '–¢–æ–ª—å–∫–æ —á–∞—Å—ã'
kit_7 = '–ß–∞—Å—ã + –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '
kit_8 = '–ö–∞–±–µ–ª—å USB‚ÄëC –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—Ä—è–¥–∫–∏ Apple Watch '
kit_9 = '–ö–∞–±–µ–ª—å USB –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ Apple Watch'
kit_full = '–ü–æ–ª–Ω—ã–π'
choices_kit = [
    ('–ë–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞', kit_1),
    (kit_2, kit_2),
    (kit_3, kit_3),
    (kit_4, kit_4),
    (kit_5, kit_5),
    (kit_6, kit_6),
    (kit_7, kit_7),
    (kit_8, kit_8),
    (kit_9, kit_9),
    (kit_full, kit_full),
]
choices_smile = [
    ('üî•', 'üî•'),
    ('üí•', 'üí•'),
    ('‚ö°', '‚ö°'),
    ('‚ÇΩ','‚ÇΩ')
]

guaranty_1 = '–ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É 3 –º–µ—Å—è—Ü–∞!‚úÖ'
guaranty_2 = '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple 2 –≥–æ–¥–∞!‚úÖ'
guaranty_3 = '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple 1 –≥–æ–¥!‚úÖ'

choices_guaranty = [
    (guaranty_1, guaranty_1),
    (guaranty_2, guaranty_2),
    (guaranty_3, guaranty_3),
]


class KitModel(models.Model):
    kit = models.CharField('–¢–µ–∫—Å—Ç', max_length=255)

    class Meta:
        verbose_name = '–ö–æ–º–ø–ª–µ–∫—Ç'
        verbose_name_plural = '–ö–æ–º–ø–ª–µ–∫—Ç—ã'

    def __str__(self):
        return self.kit


class GuarantyModel(models.Model):
    guaranty = models.CharField('–¢–µ–∫—Å—Ç', max_length=255)
    guaranty_id = models.CharField('–¢–µ–∫—Å—Ç', max_length=255)      
    class Meta:
        verbose_name = '–ì–∞—Ä–∞–Ω—Ç–∏–∏'
        verbose_name_plural = '–ì–∞—Ä–∞–Ω—Ç–∏–∏'

    def __str__(self):
        return self.guaranty


tests_1 = '–†–æ—Å—Ç–µ—Å—Çüá∑üá∫'
tests_2 = '–ù–µ –†–æ—Å—Ç–µ—Å—Ç'
choices_tests = [
    (tests_1, tests_1),
    (tests_2, tests_2),
    ]
default_guaranty = '–ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É 3 –º–µ—Å—è—Ü–∞ !‚úÖ'
default_text = text_default


def get_deadline():
    return datetime.datetime.today() + datetime.timedelta(days=5)


class Category(models.Model):
    category = models.CharField('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', max_length=100)

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'

    def __str__(self):
        return str(self.category)


class SeriesCategory(models.Model):
    category = models.CharField('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', max_length=100)

    class Meta:
        verbose_name = '–°–µ—Ä–∏—è'
        verbose_name_plural = '–°–µ—Ä–∏–∏'


    def __str__(self):
        return str(self.category)

class RegionUserModel(models.Model):
    name = models.CharField(verbose_name='–†–µ–≥–∏–æ–Ω',
                               max_length=50)
    class Meta:
        verbose_name = '–†–µ–≥–∏–æ–Ω—ã'
        verbose_name_plural = '–†–µ–≥–∏–æ–Ω—ã'

    def __str__(self):
        return self.name


valid_name_text = """
                      –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n<br><br>
                      -- iPhone 13 Pro 128 Silver\n<br>
                      -- iPad mini 6 WiFi Silver\n<br>
                      -- Watch 7 45 Silver\n<br>
                      -- AirPods 3\n<br>
                      -- MacBook Pro 13\n<br>
                      -- MacBook / iMac 2021 24' 8/256<br><br>
                      –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' —Ñ–æ—Ä–º–∞—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π"""


class Product(models.Model):
    """
    –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
    """

    image_1 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 1',
                                upload_to='',
                                null=False,
                                )
    image_2 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 2',
                                upload_to='',
                                null=False,
                                )
    image_3 = models.ImageField('–ö–∞—Ä—Ç–∏–Ω–∫–∞ 3',
                                upload_to='',
                                blank=True,
                                )
    sell = models.BooleanField('–ü—Ä–æ–¥–∞–Ω–æ?', default=False)
    booking = models.BooleanField('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ?', default=False)
    moderation = models.BooleanField('–î–æ–ø—É—â–µ–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?', default=True)
    price = models.PositiveIntegerField('–¶–µ–Ω–∞')
    discount_cost = models.PositiveIntegerField('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π', default=0)
    smile = models.CharField('–≠–º–æ–¥–∑–∏ –∫ —Ü–µ–Ω–µ', max_length=5, choices=choices_smile, null=True, blank=True,
                             help_text='–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω', default='‚ÇΩ')
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=150, null=False,
                            help_text=valid_name_text)
    name_tmp = models.CharField('–§–æ–Ω–æ–≤–æ–µ –∏–º—è', max_length=100, null=False)
    tests = models.BooleanField('–†–æ—Å—Ç–µ—Å—Ç?', default=False)
    article = models.CharField('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', max_length=15, null=False,
                               help_text='–ü—Ä–∏–º–µ—Ä: 20X100ZT')
    state = models.ForeignKey(StateModel, on_delete=models.CASCADE, verbose_name='–°–æ—Å—Ç–æ—è–Ω–∏–µ')
    state_akb = models.SmallIntegerField('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë', default=0,
                                         help_text='–û—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ 0, –µ—Å–ª–∏ –ø–æ –ê–ö–ë –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    works = models.TextField('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', null=True, blank=True,
                             help_text='–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ')
    kit = models.ForeignKey(KitModel, on_delete=models.CASCADE, verbose_name='–ö–æ–º–ø–ª–µ–∫—Ç', null=True, blank=True, default=1)

    guaranty = models.ForeignKey(GuarantyModel, on_delete=models.CASCADE, verbose_name='–ì–∞—Ä–∞–Ω—Ç–∏—è', null=True, blank=True)
    custom_guaranty = models.DateField('–°–≤–æ—è –≥–∞—Ä–∞–Ω—Ç–∏—è', null=True, blank=True)

    base_text = models.TextField('–ù–∏–∂–Ω—è—è –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É', null=False, default=default_text)
    day_created = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)
    day_next_publish = models.DateTimeField('–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞', default=get_deadline)

    category = models.ForeignKey(Category, on_delete=models.CASCADE,
                                 verbose_name='–ú–æ–¥–µ–ª—å', null=True, blank=True)
    series = models.ForeignKey(SeriesCategory, on_delete=models.CASCADE,
                               verbose_name='–°–µ—Ä–∏—è', null=True, blank=True)
          
    regin = models.ForeignKey(RegionUserModel, on_delete=models.CASCADE, null=True, verbose_name='–†–µ–≥–∏–æ–Ω',default=1)
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE, null=True, verbose_name='–ê–≤—Ç–æ—Ä',)
          
    count = models.SmallIntegerField('–°—á–µ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π', default=0)
    up_price = models.BooleanField('–¶–µ–Ω–∞ –ø–æ–¥–Ω—è—Ç–∞?', default=False)

    provider_device = models.CharField('–ü–æ—Å—Ç–∞–≤—â–∏–∫', max_length=50,default='–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞', choices=[
                                                                                                    ('–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞', '–£—Å—Ç—Ä–æ–π—Å–≤–æ –∫–ª–∏–µ–Ω—Ç–∞'),
                                                                                                    ('–ò–ª—å—è –°–∞–≤–∏—á–µ–≤', '–ò–ª—å—è –°–∞–≤–∏—á–µ–≤'),
                                                                                                    ('–≠–º–∏–ª—å', '–≠–º–∏–ª—å'),
                                                                                                        ],
                                                                                                        )
    sale = models.BooleanField('–°–∫–∏–¥–∫–∞', default=False)
    device_provider = models.BooleanField('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', default=False)
    www = models.BooleanField('–ü–µ—Ä–≤–∏—á–Ω–æ–µ SMT', default=True)


    class Meta:
        verbose_name = '–ü–æ—Å—Ç'
        verbose_name_plural = '–ü–æ—Å—Ç—ã'
    def clean(self):
        filter_names = ['Watch', 'iPhone', 'AirPods', 'iPad', 'MacBook', r'MacBook / iMac']
        name_ = str(self.name).split()[0]
        if str(self.category) != '‚å® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞':
            if name_ not in filter_names:
                if 'imac' == name_.lower():
                    self.name = r'MacBook / ' + str(self.name)
                else:
                    from django.core.exceptions import ValidationError
                    raise ValidationError({'name': '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É'})
        if not self.category:
          from django.core.exceptions import ValidationError
          raise ValidationError({'category': '–û—à–∏–±–∫–∞'})
        if not self.series:
          from django.core.exceptions import ValidationError
          raise ValidationError({'series': '–û—à–∏–±–∫–∞'})
    def save(self, extra=None, *args, **kwargs):

        if extra == '+':
            self.price += 1000
        if extra == '-':
            self.price -= 1000
        if extra == '–í–†–ï–ú–ï–ù–ù–û+':
            self.price += 4000
        if extra == '–í–†–ï–ú–ï–ù–ù–û-':
            self.price -= 4000

        if extra == '–ü—Ä–æ–¥–∞–∂–∞':
            self.sell = True

        if extra == '–ø—Ä–æ—Ü10':
            cost = self.price
            if len(str(cost)) >= 4:
                new_cost = (cost * 10 / 100) + cost
                exit_cost = [x for x in str(int(new_cost))]
                exit_cost[-3], exit_cost[-2], exit_cost[-1] = '9', '9', '0'
                self.price = int("".join(exit_cost))

        if extra == '–ø—Ä–æ—Ü20':
            cost = self.price
            if len(str(cost)) >= 4:
                new_cost = (cost * 20 / 100) + cost
                exit_cost = [x for x in str(int(new_cost))]
                exit_cost[-3], exit_cost[-2], exit_cost[-1] = '9', '9', '0'
                self.price = int("".join(exit_cost))

        if extra == '–ø—Ä–æ—Ü30':
            cost = self.price
            if len(str(cost)) >= 4:
                new_cost = (cost * 30 / 100) + cost
                exit_cost = [x for x in str(int(new_cost))]
                exit_cost[-3], exit_cost[-2], exit_cost[-1] = '9', '9', '0'
                self.price = int("".join(exit_cost))

        self.base_text = text_default
        price_list = []
        for element in str(self.price):
            price_list.append(element)
        last_1 = price_list.pop(-1)
        last_2 = price_list.pop(-1)
        last_3 = price_list.pop(-1)
        result_price = "".join(price_list) + '.' + last_3 + last_2 + last_1

        self.count = int(self.count) + 1

        if self.count == 1:
            self.name_tmp = str(self.name)

        if self.tests:
            self.name = str(self.name_tmp) + ' '+ '–†–æ—Å—Ç–µ—Å—Çüá∑üá∫'
        else:
            self.name = str(self.name_tmp)

        
        if self.discount_cost == 0:
            self.name = str(self.name)  + ' - ' + str(result_price)
        else:
            price_list = []
            for element in str(self.discount_cost):
               price_list.append(element)
            last_1 = price_list.pop(-1)
            last_2 = price_list.pop(-1)
            last_3 = price_list.pop(-1)
            res_price = "".join(price_list) + '.' + last_3 + last_2 + last_1
            self.name = str(self.name)  + ' - ' + str('\u0336'.join(str(result_price)) + '\u0336').replace('.', '') + ' ' + str(res_price)

        if self.smile:
            self.name = str(self.name) + str(self.smile)


        self.base_text = str(self.name) + '\n\n' + '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ' + str(self.article) + '\n\n'\
                                 + str(self.state) + '\n'\

        self.base_text = str(self.base_text) + '\n–ö–æ–º–ø–ª–µ–∫—Ç: ' + str(self.kit) + '\n'

        if self.state_akb != 0:
            self.base_text = str(self.base_text) + '\n–†–æ–¥–Ω–æ–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä: ' + str(self.state_akb) + '%\n'

        if self.works:
            self.base_text = str(self.base_text) + '\n–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:\n' + str(self.works) + '\n'

        if not self.guaranty:
            castom_guarnt = datetime.datetime.strptime(str(self.custom_guaranty),'%Y-%m-%d').strftime('%d-%m-%Y')
            self.base_text = str(self.base_text) + '\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è Apple –¥–æ '\
                             + str(castom_guarnt) + '\n'
        else:
            self.base_text = str(self.base_text) + '\n' + str(self.guaranty) + '\n'
        self.base_text = str(self.base_text) + default_text


        tmp_di = self.device_provider
        self.device_provider = False
        #if self.www == True:
        #   BookingProduct.objects.create(product_pka=self,
        #                                  booking_flag=self.booking,
        #                                   sell_flag=self.sell,)
        #self.www = False
        super().save(*args, **kwargs)

        if self.count == 1 or tmp_di:
            BookingProduct.objects.create(product_pka=self,
                                          booking_flag=False,
                                          sell_flag=False,)

    def __str__(self):
        return self.name
    


class BookingProduct(models.Model):
    product_pka = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–¢–æ–≤–∞—Ä')
    booking_flag = models.BooleanField('–ë—Ä–æ–Ω—å', default=False)
    sell_flag = models.BooleanField('–ü—Ä–æ–¥–∞–∂–∞', default=False)
    sell_telergram = models.BooleanField('–ü—Ä–æ–¥–∞–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º?', default=False)
    phone = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=13, null=True, blank=True)
    name_user = models.CharField('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', max_length=25, null=True, blank=True)
    date_sell = models.CharField('–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏', max_length=15, null=True)


    class Meta:
        verbose_name = '–ë—Ä–æ–Ω—å'
        verbose_name_plural = '–ë—Ä–æ–Ω—å'


    def save(self, *args, **kwargs):
        Product.objects.filter(id=self.product_pka.id).update(booking=self.booking_flag)
        Product.objects.filter(id=self.product_pka.id).update(sell=self.sell_flag)
        if self.sell_telergram:
          Product.objects.filter(id=self.product_pka.id).update(sell=True)
          self.sell_flag = True
        if not self.booking_flag and not self.sell_flag:
            self.phone = ' '
            self.name_user = ' '
        if self.sell_flag:
            self.date_sell = str(datetime.date.today().strftime('%m/%d/%Y'))
        super().save(*args, **kwargs)


    def __str__(self):
        return str(self.product_pka)


class StaticUserHourModel(models.Model):
    user_id = models.CharField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —á–∞—Å',
                               max_length=50)
    date_created = models.CharField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                                    max_length=50)
    hour_created = models.SmallIntegerField(verbose_name='–ß–∞—Å —Å–æ–∑–¥–∞–Ω–∏—è')
    full_id = models.CharField(verbose_name='–ù–∏–∫',
                               max_length=50)

    class Meta:
        verbose_name = '–Æ–∑–µ—Ä/—á–∞—Å'
        verbose_name_plural = '–Æ–∑–µ—Ä/—á–∞—Å'

    def __str__(self):
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'



class UserModel(models.Model):
    user_id = models.CharField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                               max_length=50)
    date_created = models.CharField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                                    max_length=50)
    name = models.CharField(verbose_name='–ù–∏–∫',
                            null=True,
                                  max_length=90)
    first_name = models.CharField(verbose_name='–ò–º—è',
                                  null=True,
                                  max_length=90)
    last_name = models.CharField(verbose_name='–§–∞–º–∏–ª–∏—è',
                                 null=True,
                                 max_length=90)
    super_user = models.BooleanField(verbose_name='SuperUser',
                                     default=False)
    region_user = models.ForeignKey(RegionUserModel,
                                    on_delete=models.CASCADE,
                                    null=False,
                                    default=1,
                                    verbose_name='–†–µ–≥–∏–æ–Ω',)
    notifications = models.BooleanField('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                        default=True)
    service_notifications = models.BooleanField('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                        default=False)
    provider_notifications = models.BooleanField('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â—Ç–∫–∞',
                                        default=False)
    class Meta:
        verbose_name = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        verbose_name_plural = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    def __str__(self):
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'


class SetTelegramModel(models.Model):
    flag_test = models.BooleanField()
    
    def __str__(self):
        return '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –†–æ—Å—Ç–µ—Å—Ç'


class SendGlobalMessage(models.Model):
    text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    
          
    class Meta:
        verbose_name = '–†–∞—Å—Å—ã–ª–∫–∞'
        verbose_name_plural = '–†–∞—Å—Å—ã–ª–∫–∞'
          
          
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        import logging

        Log_Format = "%(levelname)s %(asctime)s - %(message)s"
        logging.basicConfig(filename="/home/apple/code/project1/tune/tune_admin/logfile.log",
                    filemode="a",
                    format=Log_Format,
                    level=logging.ERROR)
        logger = logging.getLogger()
        
        import telebot
        import time
        TOKEN = '5239855839:AAFeQBXF4EmVJK7DDy6RN9rPeIIgskPWLig'
        client = telebot.TeleBot(TOKEN, threaded=False)
        all_users = UserModel.objects.filter(notifications=True)
        all_users = list(set(str(i.user_id) for i in all_users))
        count = 0
        client.send_message(chat_id='572982939',
                          text=str(self.text))
        for i in all_users:
            try:
                client.send_message(chat_id=i,
                                    text=str(self.text))
            except:
                logger.error(i)
            logger.error('–æ—Ç–ø—Ä–∞–≤–∏–ª', i)
            count += 1
            if count % 20 == 0:
                logger.error('–æ–∂–∏–¥–∞–Ω–∏–µ')
                time.sleep(1)

       
